// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	response "task_manager_Testing/Domain/response"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// IGenerateAccessToken provides a mock function with given fields: userID, role
func (_m *TokenService) IGenerateAccessToken(userID string, role string) (*response.TokenResponse, error) {
	ret := _m.Called(userID, role)

	if len(ret) == 0 {
		panic("no return value specified for IGenerateAccessToken")
	}

	var r0 *response.TokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*response.TokenResponse, error)); ok {
		return rf(userID, role)
	}
	if rf, ok := ret.Get(0).(func(string, string) *response.TokenResponse); ok {
		r0 = rf(userID, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userID, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IVerifyToken provides a mock function with given fields: tokenString
func (_m *TokenService) IVerifyToken(tokenString string) (jwt.MapClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for IVerifyToken")
	}

	var r0 jwt.MapClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (jwt.MapClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) jwt.MapClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(jwt.MapClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
