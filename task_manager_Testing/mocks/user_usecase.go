// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "task_manager_Testing/Domain/entities"

	mock "github.com/stretchr/testify/mock"

	request "task_manager_Testing/Domain/request"

	response "task_manager_Testing/Domain/response"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// IGetAllUsers provides a mock function with given fields: ctx
func (_m *UserUsecase) IGetAllUsers(ctx context.Context) ([]model.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IGetAllUsers")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILoginUser provides a mock function with given fields: ctx, creds
func (_m *UserUsecase) ILoginUser(ctx context.Context, creds request.Credentials) (*response.TokenResponse, error) {
	ret := _m.Called(ctx, creds)

	if len(ret) == 0 {
		panic("no return value specified for ILoginUser")
	}

	var r0 *response.TokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Credentials) (*response.TokenResponse, error)); ok {
		return rf(ctx, creds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.Credentials) *response.TokenResponse); ok {
		r0 = rf(ctx, creds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.Credentials) error); ok {
		r1 = rf(ctx, creds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPromoteUser provides a mock function with given fields: ctx, adminID, targetUserID
func (_m *UserUsecase) IPromoteUser(ctx context.Context, adminID string, targetUserID string) error {
	ret := _m.Called(ctx, adminID, targetUserID)

	if len(ret) == 0 {
		panic("no return value specified for IPromoteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, adminID, targetUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRegisterUser provides a mock function with given fields: ctx, creds
func (_m *UserUsecase) IRegisterUser(ctx context.Context, creds request.Credentials) error {
	ret := _m.Called(ctx, creds)

	if len(ret) == 0 {
		panic("no return value specified for IRegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, request.Credentials) error); ok {
		r0 = rf(ctx, creds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
