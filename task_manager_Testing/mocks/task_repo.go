// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "task_manager_Testing/Domain/entities"
)

// TaskRepo is an autogenerated mock type for the TaskRepo type
type TaskRepo struct {
	mock.Mock
}

// IAddTask provides a mock function with given fields: ctx, newTask
func (_m *TaskRepo) IAddTask(ctx context.Context, newTask model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, newTask)

	if len(ret) == 0 {
		panic("no return value specified for IAddTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) (*model.Task, error)); ok {
		return rf(ctx, newTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Task) *model.Task); ok {
		r0 = rf(ctx, newTask)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Task) error); ok {
		r1 = rf(ctx, newTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IDeleteTask provides a mock function with given fields: ctx, id
func (_m *TaskRepo) IDeleteTask(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IDeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IGetAllTasks provides a mock function with given fields: ctx
func (_m *TaskRepo) IGetAllTasks(ctx context.Context) ([]model.Task, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IGetAllTasks")
	}

	var r0 []model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Task, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Task); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IGetTaskById provides a mock function with given fields: ctx, id
func (_m *TaskRepo) IGetTaskById(ctx context.Context, id string) (*model.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IGetTaskById")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUpdateTask provides a mock function with given fields: ctx, id, updated
func (_m *TaskRepo) IUpdateTask(ctx context.Context, id string, updated model.Task) (*model.Task, error) {
	ret := _m.Called(ctx, id, updated)

	if len(ret) == 0 {
		panic("no return value specified for IUpdateTask")
	}

	var r0 *model.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Task) (*model.Task, error)); ok {
		return rf(ctx, id, updated)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Task) *model.Task); ok {
		r0 = rf(ctx, id, updated)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Task) error); ok {
		r1 = rf(ctx, id, updated)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepo creates a new instance of TaskRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepo {
	mock := &TaskRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
